# emmet语法

<!--生成标签想有id或class  标签名.  或 标签名# -->

<!--
  下面的$是 class为demo 从1-5
-->
.demo$*5

<!--
  大括号是标签内想要的内容
-->
div{hellow}*3



-------------------------------------



# 选择器

## 兄弟选择器，父子选择器

2:链接伪类选择器
a:link 未访问
a:visted 以访问
a:hover	鼠标悬停
a:active 鼠标按下

## :focus伪类选择器

只针对于input类的表单  获取焦点时候



------------------------------------------

# html分块级元素和行内元素 和行内快元素

## 块级元素

如div p h1
1:独占一行
2:可以自己设置宽高，内外边距
3:宽默认是父容器100%
4:是一个盒子，里面可以放块级元素和行内元素

注意：文字类的元素内里面不能放块级元素，特别是div

## 行内元素

1:一行可以多个共存
2:高宽不能设置
3:默认宽度它本身
4:行内元素只能放文本或其他行内元素

行内快元素：
具有默认宽高，具有行内元素的特征

## 元素的转换

转换为块元素:display:block
转换为行内:display:inline

​	

-----------------------------------------------

# 背景图片background-image

1:背景图或者是小图标一般用background-image，不使用img插入的方法，因为背景图好定位方向
默认状态是平铺的background-repeat状态


2:背景图片的定位background-position  两个参数(x,y)可以是方位名如center left right 等



3:背景图片如果是精确单位，也是x，y，第一个和第二个一定是x,y，如果只有一个一定是x，另一个默认center


4:背景图片也可以是混合的，xy可以是方位也可以是具体参数，这样写，第一个和第二个一定是x,y

5:背景图片的滚动
一个背景图片随着下滑而下滑，因为它默认是background-attachment:scroll   该为fixed则不滚动

6:背景色的半透明
background:rgba(r,g,b,a)
a:0-1 之间 	alpha透明度

# css的三大特性

1:层叠性 2:继承性 3:优先级
优先级:每个选择器都有权重，继承过来的权重是0





-------------------------------------------------

# 盒子(div)

## 1:盒子的组成

border margin padding content

## 2:paddingn内边距的简写

padding:5px 4边内边距为4
padding:5px 10px  上下5 左右10
padding:5px 10px 20px 上5 左右10 下20
padding:5px 10px 20px 30px  上5 右10 下20 左30 顺时针



3:如果设置了withd或height，padding的设置会影响盒子的大小，在设计的时候，width应该减去左右一共的padding，height应该
减去上下一共的padding

4:盒子的水平居中,想实现盒子在浏览器的水平居中，把margin左右外边距设置为auto就行



5:外边距合并-嵌套div的塌陷

当div嵌套时候，给子设置外边距，子设置不了，反倒是父div设置了
解决1:给父border
  2:给父内边距
  3:给父属性 overflow:hidden;

*/

/*border: 1px solid transparent;*/
/*padding: 1px;*/
overflow:hidden;



6:许多元素都有默认的内外边距。在布局时候，一定要清除一下
*{
margin: 0;
padding: 0;
}

## 盒子阴影

box-shadow: h-shadow v-shadow blur spread color inset;

| *h-shadow* | 必需。水平阴影的位置。允许负值。         |      |
| ---------- | ---------------------------------------- | ---- |
| *v-shadow* | 必需。垂直阴影的位置。允许负值。         |      |
| *blur*     | 可选。模糊距离。                         |      |
| *spread*   | 可选。阴影的尺寸。                       |      |
| *color*    | 可选。阴影的颜色。请参阅 CSS 颜色值。    |      |
| inset      | 可选。将外部阴影 (outset) 改为内部阴影。 |      |

# 浮动(float)

## 浮动布局

网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动

浮动的特性
一、浮动的元素会脱离标准流(脱表)
1:脱离标准流的控制，移动到指定位置
2:浮动的盒子不在保留原先的位置(不占位置)

二、浮动的元素会一行内显示并且元素顶部对齐
三、浮动的元素会具有行内快元素的特性



浮动元素和标准流父级搭配使用
浮动元素一般会放在父里面，而父是个标准流，因为浮动是以浏览器为准的，位置我们控制不了，
所以放到父标准流里面，这样我们控制标准流就可以了，浮动也是根据父为准




网页布局第二准则：先设计大小，在摆放位置



浮动布局注意点
1:浮动和标准流父盒子搭配
先用标准流的父元素排列上下，之后内部子元素采取浮动排列左右

2:一个元素浮动，其他的兄弟也应该浮动，不然会出现问题



## 清除浮动

在布局时候，我们常常用一个父标准流包住浮动流，但是一些场面我们不好设置父标准流的高度
比如：淘宝的商品，我们无法确定父标准流的高度，这个时候，我们的方法是：不设置父标准流的
高度，父标准流的高度由浮动流的多少来决定。如果父高度为0，让子来撑开，这时候在父下面在进行
添加盒子，这个盒子就会跑到父盒子下面，因为父盒子为0，造成子盒子和下面盒子重叠，结构混乱，
这时候就需要清除浮动清除浮动的本质是，清除浮动元素脱离标准流造成的影响，让浮动的元素不
影响我下面的元素，从而解决问题

这个方法是可行的，但是会有问题，在下一个父元素写标签，会发现乱套了，标签跑到上面了，
因为浮动没有高度，父高度为0，所以重叠了
太抽象了..具体看图：
E:\前端学习\web前端\day1\04-浮动\画图


所以我们要清除浮动来实现这个浮动元素撑父元素高度的功能


清除浮动的本质是？
清除浮动元素脱离标准流造成的影响



清除浮动的方法
1:额外标签法，在最后的浮动添加标签，此标签应该有clear: both; 属性
2:overflow，在父元素上面添加属性 overflow:..
3：给父添加after伪元素
4:给父添加双伪元素

细节：1,3,4只要是添加其他元素的来清除浮动的，必须为块级元素

清除浮动总结
什么时候要清除浮动？
父没高度，影响下面布局

注意：：：height必须不设置



li是块级元素
浮动的盒子不会有外边距合并问题(塌陷问题)




----------------------------
# 定位(position)

## 为什么要定位？

做浮动做不了的事情

定位就是把盒子定在某一位置上，定位也是在摆盒子

## 定位的基本使用

定位=定位模式+边偏移

1、静态定位(static)：是元素的默认方式无定位的意思 position:static
按照标准流的特性摆放位置，它是标准流，很少用

二、relative(相对定位)(不脱表)：
1：参照自身位置进行移动
2：移动过后，原来的位置仍然存在，其他元素不能占用

三：absolute(绝对定位)(脱表)
1：如果没有父元素，或者父元素没有定位，那么以浏览器位置为准
2:如果祖先元素有定位，则以最近的一级有定位的祖先元素作为参照
3:绝对定位不占用原先位置(不占位置) 

4：绝对定位可以存在任何元素上，互不干扰

四：fixed(固定定位)(脱表)
1:以浏览器可是窗口作为参照 跟父元素没有关系	要设置宽度
2:固定定位不占有原先位置(不占位置)

## 定位布局

子绝父相，大多数用这个，父用来占位置，子在父里面随便摆放

子相父相

固定定位紧贴版心：position:50% margin-left:版心一半

z-index
在使用定位布局时候，可能遇到盒子重叠，这时候可以使用z-index来控制盒子的先后
z-index:1  参数可以是正负或0  越大盒子越靠上
只有定位的盒子才有这个属性


定位可以设置宽高

绝对定位和固定定位不能设置水平居中或垂直居中，因为脱表，如果想让水平居中，看代码
left:50%
margin-left:盒子宽度的一半

垂直居中，道理相同
给元素增加定位，效果和浮动差不多，脱标




-----------------------------------------
# 元素的显示和隐藏(display)

1:display:none 隐藏元素 并且不在占用位置
2:visbility 	隐藏元素	占用位置
3：overflow  溢出的元素







-------------------------------------------
# css的高级应用

## 精灵图

服务器请求一张大图片，这个大图片有许多小图片，我们通过background-position移动位置
确定显示的图片

网页中坐标，x轴右走是正，左负





## 字体图标的使用

先到官网下载，https://icomoon.io/#premium，1:解压，把fonts文件复制到项目目录下，2:复制css到style里面(style里面url路径要能找到fonts文件夹，这个路径不能写错)	3：给标签添加style：font-family: 'icomoon'	4：打开自体图标复制你想要的图标，粘贴到标签对里面作为内容显示出来

追加，我想在添加几个图标怎么办？import导入原来图标的json文件，在选择新图标，选择下载这时候老图标和新图标就一起下载了



## css三角做法

一个盒子不给宽高，给4边border 颜色透明transparent，这时候四边就是三角了，只不过是透明的，然后指定border就可以

## border-redius 圆角边框

border-redius:左上 右上 左下 右下	border-redius: 10px

两种写法都可以，给div加圆角



## 鼠标光标

cursor:...
具体看文档



## input边框线的清除

input text 会有边框线，这是可以取消的 border:0
取消表单轮廓 outline:none

textarea 禁止拖拽
textarea禁止拖拽	resize:none



## 图片的对齐

vertical-align 经常用于设置图片或表单的文字垂直对齐，只针对于行内块元素 

## 图片的细节处理

在div里嵌套图片，可能会有空白区域，原因是行内快元素是和基线对齐的
解决方案，给图片设置vertical-align属性

## 溢出的文字省略号显示

单行文本溢出显示省略号，必须满足三个条件

/*1:禁止换行*/
white-space: nowrap;

/*2:溢出的内容隐藏*/
overflow: hidden;

/*3:溢出的文字为省略号*/
text-overflow:ellipsis;



## 布局技巧

1，一行多个div，会出现1+1=2的问题，解决这个问题设置margin-left属性即可
2，在上面的效果添加hover 鼠标经过时候更换div颜色，会出现问题:right 的显示不出来，
原因是被margin-left压住了，要解决这个问题有两种方案 1,设置相对定位position:relative 这个可以压元素 2, 提高层级z-index:



## 文字围绕图片浮动

可以给图片设置float 浮动，然后文字就可以围绕图片了




----------------------

# html5新特性

布局新特性，以前布局全部是div	现在可以使用header,nav,article,section,aside,footer标签进行布局



## video标签

video标签，这个用来播放视频的
src="" 指定目录下的视频文件，有几个常用的属性
autoplay 自动播放视频  controls 显示播放组件	muted 静音播放(某些浏览器自动播放属性不起效，可以使用这个属性来解决)
loop 视频循环播放	poster	等待加载的图片	

video标签可以设置css width,heith 属性 



## audio标签

audio标签，这个是用来播放音乐的
src="" 指定目录下的音频文件
具体看文档...



## 新增表单类型

主要记住number(限制用户必须输入数字),tel(手机号),search(搜索框)



## 新增表单属性

required 在input标签上面添加，用户则必须输入，不能为空
placeholder 提示文本
autofocus	自动聚焦
autocompelate	是否提示之前提交过的信息
multiple	允许用户提交多个文件

# css3新特性

## 新增css选择器

### 属性选择器

结构:	E(标签)[value(属性)] 选择具有value属性的e标签
E[value="one"]  选择具有value属性，并且属性值为value的e标签

这两个是重点

### 结构伪类选择器

1:child 2:type-of

结构: 父标签 子标签:选择器-child或type-of
section div:first-of-type
section div:first-child



### child 和 type-of的区别

child运行机制是：
section div:first-child
先找到所有孩子，把孩子123划分起来，然后用第一个元素和div比(前面指定的元素比较).如果相同则选择，不同则舍弃

section div:first-of-type
type-of的运行机制是：
先找到所有div(前面指定的元素)，然后在123逐个寻找



first last nth() 三个选择器后面在跟上-child 或-of-type


nth()里面可以是数字，公式 如果是数字则是选择第几个，公式具体看文档..



## 伪元素选择器

说白了就是用css插入元素，从而减少html代码

语法 element::before{}

before:在元素里面的前面插入元素
after:在元素里面的后面插入元素


必须有content:""(字符串数值)属性，这个属性就是元素显示内容

伪元素是行内元素,权重为1


伪元素也能做到清除浮动的效果，本质上和其他方法一样，在尾部添加一个块级元素并设置clean属性





## 盒子模型

在以前的盒子里我们设置padding，或者border，都会影响盒子的width和height，我们这时候要用width和height减去多出的部分从而
保持原有设计盒子的宽高，非常麻烦

在css3中可以通过box-sizing来指定盒子模型，有两个值box-sizing:content-box，box-sizing:border-box
content-box:默认的盒子计算方法，padding+border=width/height
border-box：盒子大小就是为width	如果设置padding或border，css3会自动调整大小，让width/height不变





## 其他特性(了解即可)

图片的模糊处理

filter: blur(5px);
filter后面跟函数，有多个，详细看文档，里面的是模糊值，值越大越模糊



盒子的宽高可计算变化
在width/height后面加上:calc()
里面可以进行加减乘除运算，运算后结果就是宽高



-----------------

# css过渡动画

哪个元素需要过渡就给哪个元素添加style:transtion

transition:变化属性 花费时间  运动曲线 何时开始

过渡可以为一个元素在不同状态之间切换的时候定义不同的过渡效果。比如在不同的伪元素之间切换，
像是 :hover，:active 或者通过 JavaScript 实现的状态变化。

必须结合:hover一同使用，只添加过渡没用





-------------------------------
# 品优购项目

favicon，浏览器导航栏显示网站的小图标

seo的优化，一个网站开头必须有的三个
title:网站标题 格式：网站名(产品名)-网站介绍(不超过30字)
description:网站描述 格式：简要说明网站干什么的
keyword:关键字，一般为4,5个	格式:关键字1,关键字2



## 遇到的坑

1：盒子是不能限制文字的，任何东西都不能限制文字

2:在使用字体图标时候，添加css字体时候，注意路径，路径要能找到fonts文件夹

3:ul li 很常用	在文字方面，只需要设置li就行 ul会自动被li撑

4:overflow	很好用

5:在做鼠标经过，添加边框的效果时候，如果鼠标经过元素变大了，那么可以在原来元素加上 border: 1px solid transparent;

清除一下默认边框

# css3增强

## 2d转换(transform)

### translate

语法:transform: translate(x,y);

让一个元素沿着xy移动。

这个移动，适用于：本元素移动，其他元素不动。定位或者外边距都做不到，因为它们会影响下面的元素。而translate移动元素不影响其他元素

translate(x,y) xy可以是px，也可以是%，如果是%的话，那么是按照自身的宽或高来对比的

配合定位使用：利用这个按照自身宽高的特性，可以实现定位垂直居中不用计算，直接translate(-50%,-50%)，就可以实现xy，移动自身的一半

translate对于行内元素无效



重点：

* 可以让元素随着xy移动

* translate最大的优点：移动不会影响其他元素

* translate的%，是按照自身移动的

* 对行内标签无效

  

### rotate角度转换

让元素旋转	语法:	transform:rotate(?deg)

?是数字，正的表示顺时针旋转多少度，负的逆时针。deg代表度数单位



配合transition过渡使用，效果更好



### 配合rotate完成三角效果

给一个div右下边框，在旋转，就是三角

 

### 设置旋转中心点

使用transform-origin:x y	可以设置旋转中心点

1:xy可以写成%	默认是50%，元素的中心点

2:xy还可以设置方位名词(top bottom left right center)	这个常用



### 放大或缩小scale

语法:transform:scale(x,y)

xy代表倍数，xy写整数，可以写大可以写小，以自身的宽高为参考进行放大或缩小

优点：

1：放大或缩小不会影响其他元素

2：可以设置中心点。(直接设置width heigth 则是默认的中心点)



### 2d转换综合写法

一个元素是可以同时存在 translate rotate scale	的

但是要注意顺序:	transform: translate(xy) rotate(?deg) scale(xy)

如果不按照顺序，坐标轴会跑，达不到效果





## 动画

### 基本使用

1:定义动画

```css
/*1：先定义动画*/
  @keyframes move {
      0%{
          transform: translateX(0);
      }
      
      100%{
          transform: translateX(1200px);
      }
  }
```

2:给元素添加动画

```css
animation-name: move;
```



3：设置持续时间

```css
animation-duration: 5s;
```



```css
div{
    width: 400px;
    height: 100px;
    background-color: pink;
    /*2：给元素添加想要的动画*/
    animation-name: move;
    /*3:设置持续时间，必须设置*/
    animation-duration: 5s;
}
```



### 动画序列

在创建动画时候，@keyframes里面的百分比多少可以任意写，这就是动画序列，总时间*百分比=几秒到达。一般来说，你动画需要几个步骤，用100/步骤	得出百分比多少

```css
@keyframes move {
    0%{
        transform: translate(0,0);
    }

    25%{
        transform: translate(1000px,0);
    }

    50%{
        transform: translate(1000px,500px);
    }

    75%{
        transform: translate(0,500px);
    }

    100%{
        transform: translate(0,0);
    }
}
```





### 动画常用属性

```css
 			/* 动画名称 */
            animation-name: move;
            /* 持续时间 */
             animation-duration: 2s;
            /* 运动曲线 */
             animation-timing-function: ease;
            /* 何时开始 */
            animation-delay: 1s;
            /* 重复次数  iteration 重复的 conut 次数  infinite  无限 */
            animation-iteration-count: infinite;
            /* 是否反方向播放 默认的是 normal  如果想要反方向 就写 alternate */
            animation-direction: alternate;
            /* 动画结束后的状态 默认的是 backwards  回到起始状态 我们可以让他停留在结束状态 forwards */
             animation-fill-mode: forwards;

			/*简写*/
            /* animation: name duration timing-function delay iteration-count direction fill-mode; */
            /* animation: move 2s linear 0s 1 alternate forwards; */
```



### 运动曲线steps(步数)

steps()	里面写整数，代表动画分几步完成

```css
animation-timing-function: steps(10);
```



### 一个元素多个动画

那么就必须使用简写:animation了	在中间使用逗号分割，比如：

```css
        animation: bearrun 0.3s steps(8) infinite, move 1s forwards;
```





## 3d转换(transform)

3d转换就是在2d的基础上加了个z轴

### 透视perspective

1：透视用来让网页产生3d效果

2：透视就是模拟视距(眼睛离屏幕的距离)，值越大，看的越小，进大远小

3：透视是加在需要3d效果元素的父亲身上

语法：perspective:px

使用3d效果，必须加透视



### translateZ

translateZ就是眼睛和物体的距离。值越大，看的越大

语法：perspective:px



### perspective和translateZ的区别

我们发现使用透视和translateZ都能实现3d效果，但是本质上它们两个是有区别的。perspective是观察距离，而translateZ是眼睛离物体的距离。所以使用translateZ来实现物体3d效果

简写语法：transform：translate3d(x,y,z)



### 3d旋转rotateX

rotateX沿着x轴旋转，语法：rotateX:deg	值为旋转的角度

具体看案例

rotateX，使用左手法则来看它旋转(左手大拇指指向x轴，弯曲的手指就是正的旋转角度)。为负则反之。



### 3d旋转rotateY

rotateX沿着Y轴旋转，语法：rotateY:deg	值为旋转的角度

具体看案例

使用左手法则看它旋转(大拇指指向y轴，弯曲的手指就是正的旋转角度)，负反之



### 3d旋转rotateZ

rotateX沿着z轴旋转，跟2d旋转相似

具体看案例



### transform-style

| 值          | 描述                       |
| :---------- | :------------------------- |
| flat        | 子元素将不保留其 3D 位置。 |
| preserve-3d | 子元素将保留其 3D 位置。   |

默认是flat

preserve-3d属性：让子元素保持3d立体空间环境。

给多个元素添加3d效果时候，会发现3d效果不显示，这时候就需要添加preserve-3d属性

这个属性只要是用到3d，就是必加的，跟perspective一样重要，必须加



### 做3d效果注意的地方

一般都是一个大盒子，里面存在小盒子。小盒子是整体，用来做3d效果。而最后旋转展示3d效果时候，是给大盒子添加旋转。











